// <auto-generated />
using System;
using IVPLibrary_DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IVPLibrary_DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20250124073132_addManyToManyRelationship_Book_Author_SkippingMappingTable")]
    partial class addManyToManyRelationship_Book_Author_SkippingMappingTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorBooks", b =>
                {
                    b.Property<int>("Author_Id")
                        .HasColumnType("int");

                    b.Property<int>("BooksBookID")
                        .HasColumnType("int");

                    b.HasKey("Author_Id", "BooksBookID");

                    b.HasIndex("BooksBookID");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Author", b =>
                {
                    b.Property<int>("Author_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Author_Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Author_Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.BookDetails", b =>
                {
                    b.Property<int>("BookDetails_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookDetails_Id"));

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfChapters")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookDetails_Id");

                    b.HasIndex("BookID")
                        .IsUnique();

                    b.ToTable("BookDetails");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Books", b =>
                {
                    b.Property<int>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookID"));

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 5)
                        .HasColumnType("decimal(10,5)");

                    b.Property<int>("Publisher_Id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BookID");

                    b.HasIndex("Publisher_Id");

                    b.ToTable("Books", t =>
                        {
                            t.HasCheckConstraint("Books_Price_CK", "Price > 0");
                        });

                    b.HasData(
                        new
                        {
                            BookID = 1,
                            ISBN = "12B45",
                            Price = 1200.34m,
                            Publisher_Id = 1,
                            Title = ".NET Framework"
                        },
                        new
                        {
                            BookID = 2,
                            ISBN = "72B45",
                            Price = 1500.99m,
                            Publisher_Id = 1,
                            Title = "SQL Server"
                        },
                        new
                        {
                            BookID = 3,
                            ISBN = "00B45",
                            Price = 1000.34m,
                            Publisher_Id = 2,
                            Title = "Oracle"
                        },
                        new
                        {
                            BookID = 4,
                            ISBN = "99B45",
                            Price = 2000.99m,
                            Publisher_Id = 3,
                            Title = "Java"
                        },
                        new
                        {
                            BookID = 5,
                            ISBN = "34B45",
                            Price = 3000.99m,
                            Publisher_Id = 3,
                            Title = "ReactJS"
                        });
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("ProductID");

                    b.ToTable("Products", null, t =>
                        {
                            t.HasCheckConstraint("Product_Price_CK", "Price > 0");
                        });
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Publisher", b =>
                {
                    b.Property<int>("Publisher_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Publisher_Id"));

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Publisher_Id");

                    b.ToTable("publishers");

                    b.HasData(
                        new
                        {
                            Publisher_Id = 1,
                            Location = "Delhi",
                            Name = "IVP Publisher"
                        },
                        new
                        {
                            Publisher_Id = 2,
                            Location = "Mumbai",
                            Name = "AYT Publisher"
                        },
                        new
                        {
                            Publisher_Id = 3,
                            Location = "Bangalore",
                            Name = "Hedge Publisher"
                        });
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.SubCategory", b =>
                {
                    b.Property<int>("SubCategory_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubCategory_Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubCategory_Id");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("AuthorBooks", b =>
                {
                    b.HasOne("IVPLibrary_Models.Models.Author", null)
                        .WithMany()
                        .HasForeignKey("Author_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IVPLibrary_Models.Models.Books", null)
                        .WithMany()
                        .HasForeignKey("BooksBookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.BookDetails", b =>
                {
                    b.HasOne("IVPLibrary_Models.Models.Books", "Books")
                        .WithOne("BookDetails")
                        .HasForeignKey("IVPLibrary_Models.Models.BookDetails", "BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Books");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Books", b =>
                {
                    b.HasOne("IVPLibrary_Models.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("Publisher_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("IVPLibrary_Models.Models.Books", b =>
                {
                    b.Navigation("BookDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
